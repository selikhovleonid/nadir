#Nadir Framework

Yet another MVC PHP microframework.

##Контроллер

Контроллер представляет собой экземпляр класса, наследуемого от абстрактного 
суперкласса `\core\AController` и физически расположенного в корне директории 
комопонента `controllers`. При вызове контроллер выполняет некоторое действие 
(action), которое подразумевает обычно обращение к модели с целью получения данных, 
их дальнейшее преобразование и передачу в представление. Действие - это метод 
класса контроллера, имя действия включает префикс action и написано в стиле 
lowerCamelCase (например, `actionFoo()`).

### Контроллер и представление

В жизненном цикле веб-приложения, после связки запроса с парой Controller-Action
создается объект контроллера, который по умолчанию пытается ассоциировать с собой
объекты представления. Представление, в общем случае, является композитным и 
состоит из Макета (экземпляр класса `\core\Layout`) и Представления в узком смысле 
(объект класса `\core\View`). Умалчиваемые объекты представления ассоциируются 
только в том случае, если существуют связаные с ними файлы разметки. Так, 
файл Макета определяется конфигурацией `defaultLayout` и расположен в корне
компонента `layouts`. Файл разметки Представления в узком смысле для
некоторого `actionBar()` внутри контроллера `\controller\Foo` располагается в
файле  `\foo\bar.php`, лежащего в корне компонента `views`. Т.е. имя файла разметки
получается путем отбрасывания префикса action от имени действия, файл помещается
в директорию с именем контроллера (имена файла и директории должны быть в нижнем
регистре).

Объекты представления доступны внутри контроллера посредством вызова аксессоров 
`$this->getView()`, `$this->setView()`, `$this->getLayout()` и `$this->setLayout()`.
В любой момент до начала рендеринга страницы возможно изменить умалчиваемый Макет 
или Представление на любой другой доступный однотипный объект.

Передача пользовательских переменных из контроллера в представление осуществляется
присваиванием нужных значений этим переменным как свойствам связанного с контроллером
объекта `$this->view`. Например:
````
\\...
public function actionFoo() {
	\\...
	$this->view->foo = 'bar';
	$this->view->bar = array(42, 'baz');
	\\...
}
\\...
````
В файле с разметкой этого представления `..\foo.php` переменные доступны для
чтения вызовом `$this->foo` и `$this->bar`. 

Рендеринг страницы осуществляется вызовом `$this->render()` внутри action. 
Представление не обязательно представляет собой систему Layout + View. Можно
отрендерить страницу, содержащую только файл View (понятно, что Layout в этом
случае должен быть `NULL`). Более того, в случае AJAX-запроса, рендеринг 
HTML-страницы часто вообще не нужен, требуется более специфический формат ответа,
на этот случай предусмотрен метод `\core\AController::renderJson()`.

###Расширение функционала контроллера
В случае необходимости внесения дополнительных возможностей в класс-предок для
контроллеров, рекомендуется создать дополнительный уровень абстракции - новый
класс, являющийся классом-наследником от `\core\AController` и суперклассом для 
контроллеров.