#Nadir Framework

Yet another MVC PHP microframework.

##Основной конфигурационный файл приложения

Веб-приложение представляет собой singleton-экземпляр класса `\core\WebApp`. При 
создании приложения его настройки берутся из файла `/config/main.php`. Конфигурации 
являют собой ассоциативный массив, который считывается при загрузке ядра фреймворка. 
Массив доступен для модификации и расширения и по умолчанию включает следующие 
элементы:

- `componentsRootMap` - карта путей компонентов приложения.
- `autoloadingRootSet` - множество корей директорий, включенных в автоподгрузку 
классов PHP.
- `defaultLayout` - умалчиваемый файл с разметкой макета.
- `page404` - разметка страницы с "ошибкой 404" по умолчанию.
- `routeMap` - таблица роутинга, содержащая соответствие между URL запроса и парой 
Controller-Action.

Доступ к конфигурациям внутри клиентского кода осуществляется посредством метода 
`\core\AppHelper::getConfig()`, в который передается имя требуемой настройки.

##componentsRootMap

Организация каталогов, содержащих основные компоненты приложения, не является раз 
и навсегда определенной. Под компонентами понимаются базовые сущности приложения: 
контроллеры, внутренние библиотеки, сторонние библиотеки, изображения, видео и пр. 
Пользователь фреймворка может самостоятельно изменить или добавить новую иерархию 
директорий. Например, если веб-приложение будет использовать видео-файлы, можно их 
хранение осуществлять в директории `/assets/video`, предварительно указав в 
конфигурационном файле:
````
'componentsRootMap => array(
    //...
    'video' =>  '/assets/video',
    //...
),'
````
Внутри клиенского кода путь к компоненту можно узнать вызовом метода 
`\core\AppHelper::getComponentRoot()`. Можно также получить абсолютный или 
относительный путь (URL) к компоненту по его имени, вызвав метод 
`\core\AppHelper::getComponentUrl()`. Полный URL обычно требуется для определения 
пути к медиа-файлам (директория `/assets`).