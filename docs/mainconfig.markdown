#Nadir Framework

Yet another MVC PHP microframework.

##Основной конфигурационный файл приложения

Веб-приложение представляет собой singleton-экземпляр класса `\core\WebApp`. При 
создании приложения его настройки берутся из файла `/config/main.php`. Конфигурации 
являют собой ассоциативный массив, который считывается при загрузке ядра фреймворка. 
Массив доступен для модификации и расширения и по умолчанию включает следующие 
элементы:

- `componentsRootMap` - карта путей компонентов приложения.
- `autoloadingRootSet` - множество корей директорий, включенных в автоподгрузку 
классов PHP.
- `defaultLayout` - умалчиваемое имя макета.
- `routeMap` - таблица роутинга, содержащая соответствие между URL запроса и парой 
Controller-Action.

Доступ к конфигурациям внутри клиентского кода осуществляется посредством метода 
`\core\AppHelper::getConfig()`, в который передается имя требуемой настройки.

###componentsRootMap

Организация каталогов, содержащих основные компоненты приложения, не является раз 
и навсегда определенной. Под компонентами понимаются базовые сущности приложения: 
контроллеры, внутренние библиотеки, сторонние библиотеки, изображения, видео и пр. 
Пользователь фреймворка может самостоятельно изменить или добавить новую иерархию 
директорий. Например, если веб-приложение будет использовать видео-файлы, можно их 
хранение осуществлять в директории `/assets/video`, предварительно указав в 
конфигурационном файле:
````php
'componentsRootMap' => array(
    //...
    'video' =>  '/assets/video',
    //...
),
````
Внутри клиенского кода путь к компоненту можно узнать вызовом метода 
`\core\AppHelper::getComponentRoot()`. Можно также получить абсолютный или 
относительный путь (URL) к компоненту по его имени, вызвав метод 
`\core\AppHelper::getComponentUrl()`. Полный URL обычно требуется для определения 
пути к медиа-файлам (директория `/assets`).

###autoloadingRootSet

Nadir легко организует автоподгрузку классов PHP. `\Autoloader`
позволяет автоматически загружать классы, именованные как в стиле пакетов 
PEAR (`foo_bar_Class`), так и классы, имена которых связаны с пространствами имен 
(`\foo\bar\Class`). По умолчанию в `autoloadingRootSet` включены следующие корни: 
- `/` - автоподгрузка контроллеров и моделей. 
- `/libs` - автоподгрузка пользовательских классов (в том числе классов,
расширяющих ядро фреймворка).
При необходимости вы можете расширить список корней. Например, если требуется 
организовать автоматическую загрузку классов некоторого стороннего фреймворка, 
располагающихся в директории `/vendor/some_framework_name/src`, в конфигурационном
файле следует указать:
````php
'autoloadingRootSet' => array(
    //...
    '/vendor/some_framework_name/src',
    //...
),
````
В этом случае обращение к классу, физически расположенному в файле 
`/vendor/some_framework_name/src/foo/Bar.php` в клиентском коде будет выглядеть 
как `\foo\Bar` либо `foo_Bar`. Альтернативным (но не рекомендуемым) вариантом 
добавления корня в стек автозагрузки будет вызов следующего кода в любой момент,
предшествующий непосредственному обращению к загружаемому классу:
````php
\Autoloader::getInstance()->add('/vendor/some_framework_name/src')->run();
````

###defaultLayout
Умалчиваемое имя макета, которому соответствует файл с разметкой, располагающийся 
в корне компонената `layouts`. Конфигурация опциональна, при ее отсутствии
представление по умолчанию не будет "вклеиваться" в макет.

###routeMap
Таблица маршрутизации содержит соответствие между URL запроса и парой 
Controller-Action, ответственной за его обработку. URL запроса может включать
целое множество вариантов запросов, если он (URL) представлен регулярным
выражением. В этом случае все части строки запроса, соответствующие подмаскам, 
будут переданы как аргументы в Action. Например, `routeMap` содержит такой 
маршрут:
````php
'routeMap'	=> array(
	//...
	'/foo/(bar|baz)/(\d+)'	=> array('CtrlName', 'actionName'),
	//...
)
````
Тогда запрос по URL `http://some_host.com/foo/baz/42` приведет к вызову 
````php
\controllers\CtrlName->actionName('baz', 42);
````
Следует помнить, что имя вызываемого метода в контроллере должно начинаться с 
префикса `action`. Перебор маршрутов идет по порядку до первого совпадения,
поэтому более специфичные regExp следует располагать в начале, а более общие - 
в конце карты.

###Расширение файла конфигурации
Очевидно, что не для всякого веб-приложения будет достаточно базовых возможностей
Nadir. Идеалогия фреймворка всячески поддерживает расширение функционала приложения.
Так, если предполагается использование некой СУБД, то в конфигурационный файл
следует вынести ее настройки, например, в следующем формате:
````php
return array(
	//...
	'db'	=>	array(
		'host'     => '',
		'username' => '',
		'password' => '',
		'dbname'   => ''
	);
	//...
);
````
Для того, чтобы добавить код инициализации пользовательских конфигураций 
(например, подключение к БД), его следует разместить в методе 
`\extensions\core\Process::run()`. В этом случае функционал "подцепится" при 
загрузке ядра приложения. В методе `\extensions\core\Process::stop()`, вызов 
которого осуществляется после прохождения полного цикла приложения, следует 
размещать код уничтожения пользовательских процессов (например, отключение от БД).